import org.apache.tools.ant.filters.ReplaceTokens
import org.joda.time.DateTime;

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'joda-time:joda-time:2.6'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'com.github.node-gradle.node' version '3.0.1'
}

def hostname = InetAddress.getLocalHost().getHostName().toUpperCase();

def now = DateTime.now().toString();

def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
def gitId = 'git rev-parse HEAD'.execute().text.trim()
def gitRev = 'git rev-list --count HEAD'.execute().text.trim()

def branch = gitBranch
if (branch.equals("master"))
    branch = "dev"

def rev = gitRev
// strip out non-alphanumeric (e.g. the '+' in '1234+')
rev = rev.replaceAll(/[^a-zA-Z0-9]/, '')

def buildSummary = gitId

if (!branch.equals("stable"))
    version project.version + "-" + branch + "_r" + rev

node {
    version = '12.19.0'
    download = true

    workDir = file("${project.buildDir}/nodejs")
    nodeModulesDir = file("${project.projectDir}")
}

task gruntRun(type: NpmTask, dependsOn: [npmInstall]) {
    args = ['run-script', 'run-grunt']
}

clean.doFirst {
    delete "${projectDir}/node_modules/"
    delete "${projectDir}/temp/"
}

task copyContent(type: Copy, dependsOn: [gruntRun]) {
    from new File(project.buildDir, 'grunt')
    into new File(project.buildDir, 'www-content_stage')
    exclude 'build.json'
}

task filterContentTemplates(type: Copy) {
    from 'src'
    into new File(project.buildDir, 'www-content_stage')
    include 'build.json'
    filter(ReplaceTokens, tokens: [
        buildSummary: project.name + "-" + project.version + " " + buildSummary + " (" + hostname + ") " + now,
        buildProject: project.name,
        buildBranch : branch,
        buildVersion: project.version,
        buildId     : buildSummary,
        buildRev    : rev,
        buildHost   : hostname,
        buildDate   : now
    ])
}

task zipContentInterface(type: Zip, dependsOn: [copyContent, filterContentTemplates]) {
    from new File(project.buildDir, 'www-content_stage')
    archiveName 'content.zip'
    destinationDir new File(project.buildDir, 'www-content/org/nodel/host')
}

task copyBuildInfo(type: Copy, dependsOn: [copyContent, filterContentTemplates]) {
    from new File(project.buildDir, 'www-content_stage')
    include 'build.json'
    destinationDir new File(project.buildDir, 'www-content/org/nodel')
}

sourceSets {
    main {
        resources.srcDir new File(project.buildDir, 'www-content')
    }
}

compileJava.dependsOn(zipContentInterface)
compileJava.dependsOn(copyBuildInfo)

dependencies {
    compile 'joda-time:joda-time:2.6'
    compile 'org.joda:joda-convert:1.7'
}
